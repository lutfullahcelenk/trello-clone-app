{"version":3,"sources":["components/TrelloActionButton.js","actions/cardsActions.js","actions/listsActions.js","components/TrelloCard.js","components/TrelloList.js","assets/Trello-Logo.wine.png","components/Navbar.js","App.js","reducers/listsReducer.js","reducers/rootReducer.js","store/store.js","index.js"],"names":["useStyles","makeStyles","addCard","padding","display","cursor","color","background","opacity","btnClose","borderRadius","marginLeft","confirm","margin","justifyContent","btnConfirm","TrelloActionButton","type","listId","classes","useState","formOpen","setFormOpen","text","setText","dispatch","useDispatch","Collapse","in","InputBase","multiline","fullWidth","value","placeholder","onBlur","onChange","e","target","className","Button","onClick","payload","Icon","Paper","cardsBox","marginBottom","TrelloCard","id","index","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","container","backgroundColor","width","height","h3","fontSize","fontWeight","TrelloList","title","cards","droppableId","droppableProps","map","card","appBar","toolBar","img","Navbar","AppBar","position","Toolbar","variant","src","logo","href","style","textDecoration","App","myLists","useSelector","state","lists","onDragEnd","result","destination","source","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","sort","direction","marginRight","list","cardID","initialState","listsReducer","action","newList","newCard","newState","splice","find","listStart","listEnd","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c46031c6.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Paper,\r\n  Icon,\r\n  makeStyles,\r\n  Collapse,\r\n  InputBase,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { addList } from \"../actions/listsActions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {addCard}  from \"../actions/cardsActions\";\r\n\r\nconst useStyles = makeStyles({\r\n  addCard: {\r\n    padding: \"15px\",\r\n    display: \"flex\",\r\n    cursor: \"pointer\",\r\n    color: \"white\",\r\n    background: \"#5AAC44\",\r\n    \"&:hover\": {\r\n      opacity: 0.8,\r\n    },\r\n  },\r\n  btnClose: {\r\n    background: \"#FC3D03\",\r\n    borderRadius: \"10px\",\r\n    color: \"white\",\r\n    marginLeft: \"10px\",\r\n    padding: \"10px\",\r\n  },\r\n  confirm: {\r\n    margin: \"10px\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  btnConfirm: {\r\n    background: \"#5AAC44\",\r\n    color: \"#fff\",\r\n    padding: \"10px\",\r\n    \"&:hover\": {\r\n      opacity: 0.8,\r\n    },\r\n  },\r\n});\r\n\r\nconst TrelloActionButton = ({ type, listId }) => {\r\n  const classes = useStyles();\r\n  const [formOpen, setFormOpen] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAddList = () => {\r\n    if (text) {\r\n      dispatch(addList(text));\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  const handleAddCard = () => {\r\n    if (text) {\r\n      dispatch(addCard(listId,text));\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Collapse in={formOpen}>\r\n        <InputBase\r\n          multiline\r\n          fullWidth\r\n          value={text}\r\n          placeholder={\r\n            type === \"card\"\r\n              ? \"Enter a title of this card...\"\r\n              : \"Enter a list title\"\r\n          }\r\n          onBlur={() => setFormOpen(false)}\r\n          onChange={(e) => setText(e.target.value)}\r\n        />\r\n\r\n        <div className={classes.confirm}>\r\n          <Button\r\n            className={classes.btnConfirm}\r\n            onClick={type === \"card\" ? handleAddCard : handleAddList}\r\n          >\r\n            {type === \"card\" ? \"Add Card\" : \"Add List\"}\r\n          </Button>\r\n          <Icon\r\n            onClick={() => setFormOpen(!formOpen)}\r\n            className={classes.btnClose}\r\n          >\r\n            close\r\n          </Icon>\r\n        </div>\r\n      </Collapse>\r\n\r\n      <Collapse in={!formOpen}>\r\n        <Paper\r\n          className={classes.addCard}\r\n          onClick={() => setFormOpen(!formOpen)}\r\n        >\r\n          <Icon>add</Icon>\r\n          <Button className={classes.btnConfirm}>\r\n            {type === \"card\" ? \"Add a new card\" : \"Add a new List\"}\r\n          </Button>\r\n        </Paper>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrelloActionButton;\r\n","\r\nexport const addCard = (listId, text) => {\r\n    return{\r\n        type: \"ADD_CARD\",\r\n        payload : { text ,listId }\r\n    }\r\n}","\r\nexport const addList = (title) => {\r\n    return{\r\n        type: \"ADD_LIST\",\r\n        payload : title\r\n    }\r\n}\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n  ) => {\r\n    return {\r\n      type: \"DRAG_HAPPENED\",\r\n      payload: {\r\n        droppableIdStart,\r\n        droppableIdEnd,\r\n        droppableIndexStart,\r\n        droppableIndexEnd,\r\n        draggableId,\r\n        type\r\n      },\r\n    };\r\n  };","import React from \"react\";\r\nimport { Card, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { CardContent } from \"@material-ui/core\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst useStyles = makeStyles({\r\n  cardsBox: {\r\n    marginBottom: 8,\r\n  },\r\n});\r\n\r\nconst TrelloCard = ({ text, id, index }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Draggable draggableId={String(id)} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Card className={classes.cardsBox}>\r\n            <CardContent>\r\n              <Typography gutterBottom>{text}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloCard;\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport TrelloActionButton from \"./TrelloActionButton\";\r\nimport TrelloCard from \"./TrelloCard\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    backgroundColor: \"#dfe3e6\",\r\n    borderRadius: 3,\r\n    width: 300,\r\n    padding: 8,\r\n    height: \"100%\",\r\n    margin: \"0 20px\",\r\n  },\r\n  h3: {\r\n    color : \"#5aac74\",\r\n    fontSize : \"1.5rem\",\r\n    fontWeight : \"bolder\"\r\n  }\r\n});\r\n\r\nconst TrelloList = ({ title, cards, listId, index }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Draggable draggableId={String(listId)} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          {...provided.draggableProps}\r\n          ref={provided.innerRef}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Droppable droppableId={String(listId)} type=\"card\">\r\n            {(provided) => (\r\n              <div\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                className={classes.container}\r\n              >\r\n                <h3 className={classes.h3}>{title}</h3>\r\n\r\n                {cards.map((card, index) => (\r\n                  <TrelloCard\r\n                    text={card.text}\r\n                    index={index}\r\n                    key={card.id}\r\n                    id={card.id}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n                <TrelloActionButton listId={listId} type=\"card\" />\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloList;\r\n","export default __webpack_public_path__ + \"static/media/Trello-Logo.wine.dce43317.png\";","import React from \"react\";\r\nimport logo from \"../assets/Trello-Logo.wine.png\";\r\nimport {\r\n  makeStyles,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  appBar: {\r\n    backgroundColor: \"#f4e0a4\",\r\n    marginBottom: \"30px\",\r\n  },\r\n  toolBar: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  img: {\r\n    height: \"90px\",\r\n  },\r\n});\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar className={classes.appBar} position=\"static\">\r\n      <Toolbar className={classes.toolBar}>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          <img className={classes.img} src={logo} />\r\n        </Typography>\r\n        <Button color=\"primary  \">\r\n          <a\r\n            target=\"_blank\"\r\n            href=\"https://github.com/lutfullahcelenk\"\r\n            style={{ textDecoration: \"none\", fontSize: \"large\" }}\r\n          >\r\n            GitHub\r\n          </a>\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TrelloList from \"./components/TrelloList\";\nimport { useSelector } from \"react-redux\";\nimport TrelloActionButton from \"./components/TrelloActionButton\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\nimport { sort } from \"./actions/listsActions\";\nimport Navbar from \"./components/Navbar\";\n\n\nconst App = () => {\n  const myLists = useSelector((state) => state.lists);\n  // console.log(myLists);\n  const dispatch = useDispatch();\n\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result;\n    if (!destination) {\n      return;\n    }\n    dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div>\n        <Navbar />\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n          {(provided) => (\n            <div\n              style={{ display: \"flex\", marginRight: 8 }}\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {myLists.map((list, index) => (\n                <TrelloList\n                  key={list.id}\n                  listId={list.id}\n                  title={list.title}\n                  cards={list.cards}\n                  index={index}\n                />\n              ))}\n              <TrelloActionButton type=\"list\" />\n            </div>\n          )}\n        </Droppable>\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default App;\n","let listId = 2;\r\nlet cardID = 5;\r\n\r\nconst initialState = [\r\n  {\r\n    title: \"TODO\",\r\n    id: `list-${0}`,\r\n    cards: [\r\n      {\r\n        id: `card-${0}`,\r\n        text: \"Learn react and redux\",\r\n      },\r\n      {\r\n        id: `card-${1}`,\r\n        text: \"Learn material ui\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"DOING\",\r\n    id: `list-${1}`,\r\n    cards: [\r\n      {\r\n        id: `card-${2}`,\r\n        text: \"Learn html and css\",\r\n      },\r\n      {\r\n        id: `card-${3}`,\r\n        text: \"Learn bootstrap\",\r\n      },\r\n      {\r\n        id: `card-${4}`,\r\n        text: \"Learn Javascript\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n\r\nconst listsReducer =  ( state= initialState ,action) => {\r\n    switch (action.type) {\r\n        \r\n        case \"ADD_LIST\" : \r\n            const newList = {\r\n                title : action.payload,\r\n                cards : [],\r\n                id : `list-${listId}`,\r\n            }\r\n            listId +=1;\r\n            return [...state, newList];\r\n\r\n        case \"ADD_CARD\" :\r\n            const newCard = {\r\n                text : action.payload.text,\r\n                id :`card-${cardID}`\r\n            }\r\n            cardID++;\r\n            const newState = state.map(list => {\r\n                if(list.id === action.payload.listId){\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards ,newCard]\r\n                    }\r\n                }else{\r\n                    return list;\r\n                }\r\n            })\r\n            return newState;\r\n\r\n            case \"DRAG_HAPPENED\":\r\n                {\r\n                const {\r\n                  droppableIdStart,\r\n                  droppableIdEnd,\r\n                  droppableIndexStart,\r\n                  droppableIndexEnd,\r\n                //   draggableId,\r\n                  type\r\n                } = action.payload\r\n                const newState = [...state]\r\n        \r\n                //dragging lists around\r\n        \r\n                if(type === \"list\"){\r\n                  const list = newState.splice(droppableIndexStart,1)\r\n                  newState.splice(droppableIndexEnd,0,...list)\r\n                  return newState\r\n                }\r\n        \r\n        \r\n                //In the same list\r\n                if(droppableIdStart === droppableIdEnd){\r\n                  const list = state.find(list => droppableIdStart === list.id)\r\n                  const card = list.cards.splice(droppableIndexStart,1)\r\n                  list.cards.splice(droppableIndexEnd,0,...card)\r\n                }\r\n        \r\n                //otherList\r\n                if(droppableIdStart !== droppableIdEnd){\r\n                  // find the List where drag happened\r\n                  const listStart = state.find(list => droppableIdStart === list.id)\r\n                  // pull out the card from this list\r\n                  const card = listStart.cards.splice(droppableIndexStart,1)\r\n                  // find the list where drag ended\r\n                  const listEnd = state.find(list => droppableIdEnd === list.id)\r\n                  // put the card in the new list\r\n                  listEnd.cards.splice(droppableIndexEnd,0,...card)\r\n                }\r\n        \r\n                return newState\r\n              }\r\n            \r\n            \r\n\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default listsReducer;","import {combineReducers} from \"redux\";\r\nimport listsReducer from \"./listsReducer\";\r\n\r\nexport default combineReducers({\r\n    lists: listsReducer\r\n})","import {createStore} from \"redux\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\n\r\n\r\nconst store = createStore(rootReducer);\r\n\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\"\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}